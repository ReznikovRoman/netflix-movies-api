version: '3.9'

services:
  server:
    restart: always
    build:
      context: .
    env_file:
      - $ENV
    expose:
      - 8001
    volumes:
      - .:/app
    command: >
      sh -c "cd /app/src
      && python movies/utils/wait_for_elastic.py
      && python -m uvicorn movies.main:create_app --reload --host 0.0.0.0 --port 8001"
    depends_on:
      elasticsearch_etl:
        condition: service_healthy
      redis-sentinel:
        condition: service_healthy
      redis:
        condition: service_started
      redis-slave:
        condition: service_started
      redis-slave-2:
        condition: service_started
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=movies_api"
      - "traefik.http.routers.movies_api.rule=Host(`api-movies.localhost`,`traefik`) || HostRegexp(`eu.ngrok.io`,`{subhost:[a-zA-Z0-9-]+}.eu.ngrok.io`)"
      - "traefik.http.routers.movies_api.entrypoints=movies_api"
    networks:
      - movies_api
      - voice_assistant_api

  redis-sentinel:
    image: bitnami/redis-sentinel:6.2.7
    environment:
      - REDIS_MASTER_PASSWORD=${NMA_REDIS_PASSWORD}
      - REDIS_MASTER_SET=${NMA_REDIS_MASTER_SET}
    depends_on:
      - redis
      - redis-slave
    expose:
      - 26379
    healthcheck:
      test: redis-cli -p 26379 ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - movies_api
      - voice_assistant_api

  redis:
    image: bitnami/redis:6.2.7
    environment:
      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=${NMA_REDIS_PASSWORD}
    ports:
      - "6379"
    volumes:
      - redis_master_data:/data
    networks:
      - movies_api
      - voice_assistant_api

  redis-slave:
    image: bitnami/redis:6.2.7
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis
      - REDIS_MASTER_PASSWORD=${NMA_REDIS_PASSWORD}
      - REDIS_PASSWORD=${NMA_REDIS_PASSWORD}
    ports:
      - "6379"
    depends_on:
      - redis
    volumes:
      - redis_slave_data:/data
    networks:
      - movies_api
      - voice_assistant_api

  redis-slave-2:
    image: bitnami/redis:6.2.7
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis
      - REDIS_MASTER_PASSWORD=${NMA_REDIS_PASSWORD}
      - REDIS_PASSWORD=${NMA_REDIS_PASSWORD}
    ports:
      - "6379"
    depends_on:
      - redis
    volumes:
      - redis_slave_data:/data
    networks:
      - movies_api
      - voice_assistant_api

  traefik:
    image: traefik:v2.7
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.movies_api.address=:80"
      - "--entrypoints.auth_api.address=:81"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingParam=0"
      - "--tracing.jaeger.traceContextHeaderName=X-Request-Id"
    ports:
      - "8008:80"
      - "8009:81"
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    depends_on:
      - server
      - server-auth
    networks:
      - movies_api

  db_admin:
    image: yandexmiddleteamv1/netflix-admin-db:latest
    environment:
      - POSTGRES_USER=${NA_DB_USER}
      - POSTGRES_PASSWORD=${NA_DB_PASSWORD}
      - POSTGRES_DB=${NA_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_admin:/var/lib/postgresql/data/
    networks:
      - movies_api
      - voice_assistant_api

  server_admin:
    platform: linux/amd64
    restart: always
    image: yandexmiddleteamv1/netflix-admin:latest
    env_file:
      - $ENV
    ports:
      - "8000:8000"
    depends_on:
      - db_admin
    networks:
      - movies_api
      - voice_assistant_api

  redis_etl:
    image: "redis:alpine"
    expose:
      - 6379
    volumes:
      - redis_data_etl:/data
    networks:
      - movies_api
      - voice_assistant_api

  elasticsearch_etl:
    image: elasticsearch:7.17.2
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms750m -Xmx750m
    ports:
      - "9200:9200"
    volumes:
      - es_data_etl:/usr/share/elasticsearch/data
    depends_on:
      - redis_etl
    healthcheck:
      test: curl -u elastic:elastic -s -f elasticsearch_etl:9200/_cat/health >/dev/null || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - movies_api
      - voice_assistant_api

  kibana_etl:
    image: kibana:7.17.2
    volumes:
      - kibana_data_etl:/usr/share/kibana/data
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch_etl:9200
    depends_on:
      - elasticsearch_etl
    networks:
      - movies_api
      - voice_assistant_api

  etl:
    platform: linux/amd64
    restart: always
    image: yandexmiddleteamv1/netflix-etl:latest
    env_file:
      - $ENV
    depends_on:
      elasticsearch_etl:
        condition: service_healthy
      redis_etl:
        condition: service_started
      db_admin:
        condition: service_started
      kibana_etl:
        condition: service_started
    networks:
      - movies_api
      - voice_assistant_api

  server-auth:
    platform: linux/amd64
    restart: always
    image: yandexmiddleteamv1/netflix-auth-api:latest
    env_file:
      - $ENV
    ports:
      - "8002:8002"
    depends_on:
      db-auth:
        condition: service_healthy
      redis-auth:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth_api.rule=Host(`api-auth.localhost`,`traefik`)"
      - "traefik.http.routers.auth_api.entrypoints=auth_api"
    networks:
      - movies_api
      - voice_assistant_api

  redis-auth:
    image: redis:7.0-alpine
    expose:
      - 6379
    volumes:
      - redis_data_auth:/data
    healthcheck:
      test: redis-cli -p 6379 ping || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - movies_api
      - voice_assistant_api

  db-auth:
    image: postgres:14.2-alpine
    environment:
      - POSTGRES_USER=${NAA_DB_USER}
      - POSTGRES_PASSWORD=${NAA_DB_PASSWORD}
      - POSTGRES_DB=${NAA_DB_NAME}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_auth:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -d $NAA_DB_NAME -U $NAA_DB_USER
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - movies_api
      - voice_assistant_api

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    depends_on:
      - server-auth
    networks:
      - movies_api
      - voice_assistant_api

volumes:
  redis_master_data:
  redis_slave_data:
  postgres_data_admin:
  redis_data_etl:
  es_data_etl:
  kibana_data_etl:
  redis_data_auth:
  postgres_data_auth:

networks:
  movies_api:
    name: movies_api
    driver: bridge
  voice_assistant_api:
    external: true
