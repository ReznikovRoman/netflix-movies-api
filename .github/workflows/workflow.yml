name: Main workflow

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lint.txt
      - name: Run linters
        run: make lint

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    services:
      redis-sentinel:
        image: bitnami/redis-sentinel:6.2.7
        env:
          REDIS_MASTER_PASSWORD: secret
          REDIS_MASTER_SET: redis_cluster
        ports:
          - "26379:26379"
        options: >-
          --health-cmd "redis-cli -p 26379 ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: bitnami/redis:6.2.7
        env:
          REDIS_REPLICATION_MODE: master
          REDIS_PASSWORD: secret
        ports:
          - 6379
        options: >-
          --health-cmd "redis-cli --pass secret ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis-slave:
        image: bitnami/redis:6.2.7
        env:
          REDIS_REPLICATION_MODE: slave
          REDIS_MASTER_HOST: redis
          REDIS_MASTER_PASSWORD: secret
          REDIS_PASSWORD: secret
        ports:
          - 6379
        options: >-
          --health-cmd "redis-cli --pass secret ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      elasticsearch:
        image: elasticsearch:7.17.2
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 9200:9200
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt
          pip install -r requirements/requirements.test.txt
      - name: Run tests
        run: |
          export NMA_PROJECT_BASE_URL=http://localhost:8001
          export NMA_API_V1_STR=/api/v1
          export NMA_SERVER_NAME=localhost
          export NMA_SERVER_HOSTS=http://0.0.0.0:8001,http://127.0.0.1:8001,http://localhost:8001
          export NMA_PROJECT_NAME=netflix-movies-api
          export NMA_DEBUG=0
          export NMA_REDIS_SENTINELS=redis-sentinel
          export NMA_REDIS_MASTER_SET=redis_cluster
          export NMA_REDIS_PASSWORD=secret
          export NMA_REDIS_DECODE_RESPONSES=1
          export NE_ES_HOST=elasticsearch
          export NE_ES_PORT=9200
          export PYTEST_ADDOPTS="--ignore-glob=tests/functional/*"
          make test

  build-and-push-image:
    needs: [lint, test]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - context: .
            dockerfile: ./dev.Dockerfile
            image: yandexmiddleteamv1/netflix-movies-api
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ matrix.image }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}, ${{ matrix.image }}:latest
          labels: ${{ steps.meta.outputs.labels }}
